datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [postgis]
  schemas    = ["public"]
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres", "postgresqlExtensions", "multiSchema"]
}

generator comments {
  provider = "prisma-db-comments-generator"
}
model Acta {
  id         Int       @id @default(autoincrement())
  nombreActa String    @db.VarChar(255)
  reunionId  Int
  Reuniones  Reuniones @relation(fields: [reunionId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_acta_reunion")

  @@schema("public")
}

model Actividad {
  id      Int     @id @default(autoincrement())
  nombre  String  @db.VarChar(255)
  tipo    String  @db.VarChar(255)
  grupoId Int
  grupo   grupo   @relation(fields: [grupoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_actividad_grupo")
  Tarea   Tarea[]

  @@schema("public")
}

model FechaProgramada {
  id        Int      @id @default(autoincrement())
  fechaHora DateTime @db.Timestamp(6)
  tareaId   Int
  Tarea     Tarea    @relation(fields: [tareaId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_fechaprogramada_tarea")

  @@schema("public")
}

model Reuniones {
  id                  Int       @id @default(autoincrement())
  nombreReunion       String    @db.VarChar(255)
  fechaReunion        DateTime  @db.Timestamp(6)
  fechaSegundaReunion DateTime? @db.Timestamp(6)
  grupoId             Int
  Acta                Acta[]
  grupo               grupo     @relation(fields: [grupoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_reuniones_grupo")

  @@schema("public")
}

model Tarea {
  id              Int               @id @default(autoincrement())
  nombre          String            @db.VarChar(255)
  responsableId   Int
  actividadId     Int
  resultado       String?
  acta            String?
  FechaProgramada FechaProgramada[]
  Actividad       Actividad         @relation(fields: [actividadId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tarea_actividad")
  usuario         User              @relation(fields: [responsableId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tarea_responsable")

  @@schema("public")
}

model TareaUsuario {
  id        Int   @id @default(autoincrement())
  grupoId    Int
  usuarioId   Int
  usuario   User  @relation(fields: [usuarioId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tareausuario_usuario")
  grupo     grupo @relation(fields: [grupoId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_tareausuario_grupo") 

  @@schema("public")
}

model grupo {
  id             Int         @id @default(autoincrement())
  nombre         String      @db.VarChar(200)
  periodo_inicio DateTime?   @db.Date
  periodo_fin    DateTime?   @db.Date
  fecha_crea     DateTime?   @default(now())
  fecha_modifica DateTime?
  fecha_elimina  DateTime?
  Actividad      Actividad[]
  Reuniones      Reuniones[]
  TareaUsuario   TareaUsuario[] 
  documentosGrupo  documentosGrupo[] 
  @@schema("public")
}

model documentos {
  id             Int         @id @default(autoincrement())
  titulo         String      @db.VarChar(200)
  tipoVizualizacion         String      @db.VarChar(200)
  fecha_crea     DateTime?   @default(now())
  fecha_modifica DateTime?
  fecha_elimina  DateTime?
  subdocumentos Subdocumentos[] 
  @@schema("public")
}
model Subdocumentos {
  id             Int         @id @default(autoincrement())
  tituloSub         String      @db.VarChar(200)
  nombreArchivo         String?      @db.VarChar(200)
  documentosId  Int   
  fecha_crea     DateTime?   @default(now())
  fecha_modifica DateTime?
  fecha_elimina  DateTime?
  documentos    documentos     @relation(fields: [documentosId], references: [id],onDelete: Cascade, onUpdate: NoAction) 
  
  @@schema("public")
}
model documentosGrupo {
  id             Int       @id @default(autoincrement())
  nombre         String    @db.VarChar(200)
  descripcion    String?   @db.VarChar(200)
  nombreArchivo  String?   @db.VarChar(200)
  grupoId        Int
  fecha_crea     DateTime? @default(now())
  fecha_modifica DateTime?
  fecha_elimina  DateTime?

  grupo          grupo     @relation(fields: [grupoId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("public")
}